{"version":3,"sources":["component/Layout/Layout.js","component/Info/Info.js","component/Post/Post.js","component/Engagement/Engagement.js","component/CommentBox/CommentBox.js","component/ShowComments/ShowComments.js","component/Comments/Comments.js","container/SocialCard.js","App.js","serviceWorker.js","index.js","img/ogundare.jpg"],"names":["Layout","props","className","children","Info","Posts","src","User","alt","class","target","href","Engagement","classNameLike","classNameRetweet","like","retweet","aria-hidden","onClick","showTextarea","commentCount","liked","likeCount","retweeted","retweetCount","CommentBox","name","id","rows","update","updateComment","saveComment","ShowComments","show_comments","comments","map","cmt","index","key","edit","delete","storeComment","commentbox","toggleCommentBox","SocialCard","state","toggleLike","toggleRetweet","commentIndex","likeToggle","toggle","setState","retweetToggle","getFromStorage","retrieve","localStorage","getItem","JSON","parse","saveToStorage","val","push","toString","stringify","setItem","textarea","document","querySelector","value","length","splice","setTimeout","focus","comment","this","like_count","retweet_count","Post","Comments","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.47fdff58.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Layout = (props) => {\r\n return (\r\n  <div className='container-layout'>\r\n   {props.children}\r\n  </div>\r\n )\r\n}\r\n\r\nexport default Layout;","import React from 'react';\r\n\r\nconst Info = (props) => {\r\n let info = (\r\n  <div className=\"container info__container\">\r\n    <span className=\"picture text-light\"> &nbsp; <strong>@Sam</strong></span>\r\n    <div className=\"header__title\">\r\n     <h5>The Practical Guide</h5>\r\n     <p> A Programmer's Journey</p>\r\n     <span className=\"small\"> author: <code className=\"text-primary\">Samuel</code></span>\r\n    </div>\r\n  </div>\r\n );\r\n\r\n return info;\r\n}\r\n\r\nexport default Info;","import React from 'react';\r\nimport User from '../../img/ogundare.jpg';\r\n\r\nconst Posts = (props) => {\r\n return (\r\n  <div className=\"container posts p-0\">\r\n   <div className=\"posts__bg\">\r\n   <span className=\"posts__picture\"> &nbsp; <strong>@Sam</strong></span>\r\n    <h2 className=\"posts__heading text-light text-center\"> A Programmer's Journey.</h2>\r\n    <div className=\"user\">\r\n     <span className=\"user__name\">Samuel</span>\r\n     <span className=\"user__pic\">\r\n      <img src={User} alt=\"john doe\"/>\r\n     </span>\r\n    </div>\r\n   </div>\r\n   <div className=\"posts__preview p-2\">\r\n    <h4 className=\"posts__title\">A Programmer's Journey.</h4>\r\n    <hr className=\"horizontal__line\" />\r\n    <p className=\"quote\">\r\n     Everything you've ever wanted is on the other side of fear.\r\n     <code>George Addair</code>\r\n     </p>\r\n    \r\n    <p className=\"link\">\r\n     <code class=\"badge badge-danger p-1\">\r\n      <a class=\"text-light\" target=\"_blank\" href=\"https://github.com/orsdev\">github</a>\r\n      </code>\r\n      </p>\r\n   </div>\r\n  </div>\r\n )\r\n}\r\n\r\nexport default Posts;","import React from 'react';\r\n\r\nconst Engagement = (props) => {\r\n\r\n let classNameLike;\r\n let classNameRetweet;\r\n\r\n if(props.like) {\r\n  classNameLike = \"fa fa-heart text-danger\";\r\n }else {\r\n  classNameLike = \"fa fa-heart-o\";\r\n }\r\n\r\n if(props.retweet) {\r\n  classNameRetweet = \"fa fa-retweet text-success\";\r\n }else {\r\n  classNameRetweet = \"fa fa-retweet\";\r\n }\r\n\r\n let engage = (\r\n  <div className=\"engage container p-3\">\r\n   <span className=\"comment\">\r\n    <i className=\"fa fa-comment\" aria-hidden=\"true\" onClick={props.showTextarea}></i>\r\n    <small className=\"count\">{props.commentCount}</small>\r\n   </span>\r\n   <span className=\"like\">\r\n    <i className= {classNameLike} onClick={props.liked} aria-hidden=\"true\"></i>\r\n    <small className=\"count\">{props.likeCount}</small>\r\n   </span>\r\n   <span className=\"retweet\">\r\n    <i className={classNameRetweet} onClick={props.retweeted} aria-hidden=\"true\"></i>\r\n    <small className=\"count\">{props.retweetCount}</small>\r\n   </span>\r\n  </div>\r\n );\r\n\r\n return engage;\r\n};\r\n\r\nexport default Engagement;","import React from 'react';\r\n\r\nconst CommentBox = (props) => {\r\n return (\r\n  <div className='comment_box'>\r\n   <textarea\r\n    name=\"commentbox\"\r\n    id=\"commentbox\"\r\n    className=\"commentbox\"\r\n    rows=\"5\"></textarea>\r\n   {\r\n   props.update \r\n   ?\r\n   <button\r\n   className=\"btn btn-success d-block mx-auto mt-3\"\r\n   onClick={props.updateComment}>\r\n   Update\r\n   </button>\r\n    :\r\n    <button\r\n    className=\"btn btn-danger d-block mx-auto mt-3\"\r\n    onClick={props.saveComment}>\r\n    Comment\r\n    </button>\r\n}\r\n  </div>\r\n );\r\n};\r\n\r\nexport default CommentBox;","import React from 'react';\r\n\r\nconst ShowComments = (props) => {\r\n\r\nlet show_comments = null;\r\n\r\nif(props.comments !== null){\r\n show_comments = props.comments.map((cmt, index) => {\r\n  return (\r\n   <div key={index}\r\n    className=\"mx-auto w-75 px-2 mt-3 text-center commentText\">\r\n     <p> {cmt} </p>\r\n     <div className=\"modify\">\r\n    <i onClick={() => {props.edit(index)}} className=\"fa fa-pencil\" aria-hidden=\"true\"></i>\r\n    <i onClick={()=>{props.delete(index)}} className=\"fa fa-trash-o\" aria-hidden=\"true\"></i>\r\n    </div>\r\n   </div>\r\n  )\r\n });\r\n}\r\n return show_comments;\r\n}\r\n\r\nexport default ShowComments;","import React, { Fragment } from 'react';\r\nimport CommentBox from '../CommentBox/CommentBox';\r\nimport ShowComments from '../ShowComments/ShowComments';\r\n\r\nconst storeComment = (props) => {\r\n\r\n let commentbox = null;\r\n//show commentbox if true\r\n if (props.toggleCommentBox) {\r\n  commentbox = <CommentBox\r\n   saveComment={props.saveComment}\r\n   update={props.update}\r\n   updateComment={props.updateComment} />\r\n }\r\n\r\n return (\r\n  <Fragment>\r\n   {commentbox}\r\n   <ShowComments\r\n   edit={props.edit}\r\n   delete={props.delete}\r\n   comments={props.comments} />\r\n  </Fragment>\r\n )\r\n};\r\n\r\nexport default storeComment;","import React, { Component } from 'react';\r\nimport Layout from '../component/Layout/Layout';\r\nimport Info from '../component/Info/Info';\r\nimport Post from '../component/Post/Post';\r\nimport Engagement from '../component/Engagement/Engagement';\r\nimport Comments from '../component/Comments/Comments';\r\n\r\nclass SocialCard extends Component {\r\n //state\r\n state = {\r\n  toggleLike: false,\r\n  toggleRetweet: false,\r\n  toggleCommentBox: false,\r\n  comments: null,\r\n  commentCount: null,\r\n  update: false,\r\n  commentIndex: null\r\n };\r\n\r\n /*\r\n  call once immediately after render function\r\n  is called, assign new value from\r\n  local storage to states\r\n  */\r\n componentDidMount() {\r\n\r\n  this.setState({\r\n   comments: this.getFromStorage(),\r\n   commentCount: this.getFromStorage().length\r\n  })\r\n\r\n }\r\n\r\n //like and unlike post\r\n likeToggle = () => {\r\n  let toggle = !this.state.toggleLike;\r\n  this.setState({\r\n   toggleLike: toggle\r\n  })\r\n }\r\n\r\n //retweet and retweet post\r\n retweetToggle = () => {\r\n  let toggle = !this.state.toggleRetweet;\r\n  this.setState({\r\n   toggleRetweet: toggle\r\n  })\r\n }\r\n\r\n //show and hide comment field\r\n CommentBox = () => {\r\n  let toggle = !this.state.toggleCommentBox;\r\n  this.setState({\r\n   toggleCommentBox: toggle,\r\n   update: false\r\n  })\r\n }\r\n\r\n //retrieve date from localstorage\r\n getFromStorage = () => {\r\n  //get data from local storage\r\n  let retrieve = localStorage.getItem('comment');\r\n  //declare variable\r\n  let array;\r\n\r\n  //if localstorage is empty, run code\r\n  if (!retrieve) {\r\n   array = [];\r\n  } else {\r\n   //convert array to object\r\n   array = JSON.parse(retrieve);\r\n  }\r\n  return array;\r\n }\r\n\r\n //function for saving to localstorage\r\n saveToStorage = (val) => {\r\n  let retrieve = this.getFromStorage();\r\n\r\n  retrieve.push(val);\r\n  //convert to string\r\n  let toString = JSON.stringify(retrieve);\r\n  //save to localStorage\r\n  localStorage.setItem('comment', toString);\r\n\r\n  return retrieve;\r\n }\r\n\r\n\r\n saveComment = () => {\r\n  let textarea = document.querySelector('#commentbox');\r\n\r\n  if (textarea.value) {\r\n\r\n   //save comment to localstorage\r\n   this.saveToStorage(textarea.value);\r\n\r\n   let toggle = !this.state.toggleCommentBox;\r\n\r\n   //assign comment state an update localstorage data\r\n   this.setState({\r\n    comments: this.getFromStorage(),\r\n    commentCount: this.getFromStorage().length,\r\n    toggleCommentBox: toggle\r\n   });\r\n  }\r\n\r\n }\r\n\r\n //delete comments from localStorage\r\n delete = (index) => {\r\n  //get data from local storage\r\n  let retrieve = localStorage.getItem('comment');\r\n  //convert to array object\r\n  retrieve = JSON.parse(retrieve);\r\n  //remove element from array\r\n  retrieve.splice(index, 1);\r\n\r\n  /* \r\n   convert to strings and save to localStorage\r\n   */\r\n  localStorage.setItem('comment', JSON.stringify(retrieve));\r\n  //set states\r\n  this.setState({\r\n   comments: this.getFromStorage(),\r\n   commentCount: this.getFromStorage().length\r\n  })\r\n\r\n }\r\n\r\n //edit comment\r\n edit = (index) => {\r\n\r\n  //set state\r\n  this.setState({\r\n   toggleCommentBox: true,\r\n   update: true,\r\n   commentIndex: index\r\n  });\r\n\r\n  /*\r\n   getting textarea from dom, returns null\r\n   since it has not yet been rendered to the dom.\r\n   setTimeout was used here to wait toggleCommentBox\r\n   state to update before executing this code\r\n   */\r\n  setTimeout(() => {\r\n   //get element from dom\r\n   const textarea = document.querySelector('#commentbox');\r\n   //copy state\r\n   const comments = { ...this.state.comments };\r\n   //assign value to textarea\r\n   textarea.value = comments[index];\r\n   textarea.focus();\r\n\r\n  }, 10);\r\n\r\n }\r\n\r\n //update comment and save to localStorage\r\n updateComment = () => {\r\n  //get element from dom\r\n  const textarea = document.querySelector('#commentbox');\r\n  //copy state\r\n  const copyState = { ...this.state };\r\n  //copy comments\r\n  const comment = [...this.state.comments];\r\n  //replace comment with new comment\r\n  comment[this.state.commentIndex] = textarea.value;\r\n  //save to localStorage\r\n  localStorage.setItem('comment', JSON.stringify(comment));\r\n\r\n  //set state\r\n  this.setState({\r\n   comments: this.getFromStorage(),\r\n   toggleCommentBox: false\r\n  });\r\n\r\n }\r\n\r\n render() {\r\n  //declare variables\r\n  let like_count;\r\n  let retweet_count;\r\n\r\n  //it true, assign variable a value\r\n  if (this.state.toggleLike) {\r\n   like_count = 1;\r\n  }\r\n\r\n  //it true, assign variable a value\r\n  if (this.state.toggleRetweet) {\r\n   retweet_count = 1;\r\n  }\r\n\r\n  return (\r\n   <Layout>\r\n    <div className=\"social__card\">\r\n     <Info />\r\n     <Post />\r\n     <Engagement\r\n      like={this.state.toggleLike}\r\n      likeCount={like_count}\r\n      retweetCount={retweet_count}\r\n      commentCount={this.state.commentCount}\r\n      retweet={this.state.toggleRetweet}\r\n      liked={this.likeToggle}\r\n      retweeted={this.retweetToggle}\r\n      showTextarea={this.CommentBox} />\r\n    </div>\r\n    <div className=\"comment_section mx-auto\">\r\n     <Comments\r\n      edit={this.edit}\r\n      delete={this.delete}\r\n      saveToStorage={this.saveToStorage}\r\n      getFromStorage={this.getFromStorage}\r\n      comments={this.state.comments}\r\n      update={this.state.update}\r\n      saveComment={this.saveComment}\r\n      updateComment={this.updateComment}\r\n      toggleCommentBox={this.state.toggleCommentBox} />\r\n    </div>\r\n   </Layout>\r\n  )\r\n }\r\n}\r\n\r\nexport default SocialCard;  ","import React, {Component} from 'react';\nimport SocialCard from './container/SocialCard';\nimport './css/style.css';\n\nclass App extends Component {\n render() {\n  return (\n   <SocialCard />\n  )\n }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/ogundare.55eef52f.jpg\";"],"sourceRoot":""}